
$app.ready(function ($app) {
    (function ($, $1, $app) {


        if ((typeof $app.filter != "undefined"))
            return; //prevent double invocation

        $app.form = {};
        $app.filter = {};


        var dialogDefaultOptions = {
            modal: true,
            autoOpen: false,
            title: 'Form',
            width: 350,
            height: 400,
            resizable: true,
            buttons: {}
        };

        var dialogForm = $('<div></div>')
                .hide()
                .appendTo('body')
                .dialog(dialogDefaultOptions);



        $app.form.css = {
            invalid: 'form-flag-invalid'
        };

        try {
            //$.noop();
        } catch (ex) {
            $1.error("[$app.filter.example] Error.", ex);
        }

///////////////////////////////////////////////////////////// FORM
        /**
         * Open self managing form dialogue.
         * The form is generated by a service with action attribute pointing to a service name
         * The dialogue will have two buttons Save and Close
         * - clicking Close close the dialogue
         * - clicking Save will cause request to the service specified in the form
         * The service should reply js object in json,
         * {
         *		success: true|false,
         *		summary: summary text about result,
         *		attachment: {
         *			...
         *		}
         * }
         * 
         * @param onSuccess Function to execute if the form result is success
         * @param serviceName Service name for requesting the form
         * @param serviceArgs Arguments for the service
         * @param activityTitle Title to be used in dialogue
         * @param dialogOptions The dialog options
         */
        $app.form.openAutoDialog = function (serviceName, serviceArgs, activityTitle, dialogOptions, onSuccess) {
            try {
                if (dialogForm.dialog('isOpen'))
                    throw 'Must close current dialogue before opening new one';
                var options = $.extend(dialogDefaultOptions, dialogOptions, {
                    'title': activityTitle,
                    'buttons': {
                        'Close': function () {
                            $app.form.closeDialog();
                        },
                        'Save': function () {
                            try {
                                var $form = $('form:first', this);
                                if (!$form.length) {
                                    $1.warn("[$app.form.openAutoDialog@save] Can not find form in the dialog");
                                    return;
                                }
                                var serviceName = $form.attr('action');
                                if (serviceName == '#') {
                                    $1.warn("[$app.form.openAutoDialog@save] Invalid form action service:", serviceName);
                                    return;
                                }
                                $app.form.execService(serviceName, $form, activityTitle, function (reply) {
                                    $app.form.closeDialog();
                                    if (typeof onSuccess == 'function')
                                        onSuccess(reply);
                                });
                            } catch (ex) {
                                $1.error("[$app.form.openAutoDialog@save] Error.", ex);
                            }
                        }
                    }});
                dialogForm
                        .html('')
                        .dialog('option', options)
                        .dialog('open');
                $app.content(serviceName, serviceArgs, $.noop, dialogForm);
                return this;
            } catch (ex) {
                $1.error("[$app.openAutoDialog] Error.", ex);
            }
        };


///////////////////////////////////////////////////////////// FORM
        /**
         * Open self managing form dialogue.
         * The form is generated by a service with action attribute pointing to a service name
         * The dialogue will have two buttons Print and Close
         * - clicking Close close the dialogue
         * - clicking Print will cause request to the service specified in the form
         * The service should reply js object in json,
         * {
         *		success: true|false,
         *		summary: summary text about result,
         *		attachment: {
         *			...
         *		}
         * }
         * 
         * @param onSuccess Function to execute if the form result is success
         * @param serviceName Service name for requesting the form
         * @param serviceArgs Arguments for the service
         * @param activityTitle Title to be used in dialogue
         * @param dialogOptions The dialog options
         * 
         * @author Fathir Wafda
         */
        $app.form.openPrintDialog = function (serviceName, serviceArgs, activityTitle, dialogOptions, onSuccess) {
            try {
                if (dialogForm.dialog('isOpen'))
                    throw 'Must close current dialogue before opening new one';
                var options = $.extend(dialogDefaultOptions, dialogOptions, {
                    'title': activityTitle,
                    'buttons': {
                        'Close': function () {
                            $app.form.closeDialog();
                        },
                        'Download Report': function () {
                            try {
                                var $form = $('form:first', this);
                                if (!$form.length) {
                                    $1.warn("[$app.form.openPrintDialog@print] Can not find form in the dialog");
                                    return;
                                }
                                var serviceName = $form.attr('action');
                                if (serviceName == '#') {
                                    $1.warn("[$app.form.openPrintDialog@print] Invalid form action service:", serviceName);
                                    return;
                                }
                                
                                $('body').prepend("<div class='loader-container'><div class='loader'><h3>Processing..</h3><img src='skin/images/wheel.gif'></div></div>");
                                
                                var loading = $('.loader-container'),
                                    url = serviceName + '?' + $form.serialize(),                                
                                    checkUrl = url + "&check=TRUE";
                                    
                                loading.show();
                                $.post(checkUrl, function(response){
//                                    if($.trim(response) !== "File Doesn't Exist"){
                                    if($.trim(response) === "File Doesn't Exist"){
//                                        console.log(response);
//                                        console.log('t  '+response.responseTest);
                                        loading.remove();
                                        alert(response);
                                    } else {
//                                        window.
//                                        var newWin=window.open(url,'','width=100,height=100');
//                                        newWin.document.write('<script>alert(top.location.href);</script>');
//                                        window.open(url, '_blank');
//                                        $.fileDownload(url)
//                                            .done(function () { })
//                                            .fail(function () { loading.remove(); alert("There was a problem generating your report, please try again.")});
                                        top.location.href = url;
                                        loading.remove();
                                    }
                                    return false;
                                });
                                
                            } catch (ex) {
                                $1.error("[$app.form.openPrintDialog@print] Error.", ex);
                            }
                        }
                    }});
                dialogForm
                        .html('')
                        .dialog('option', options)
                        .dialog('open');
                $app.content(serviceName, serviceArgs, $.noop, dialogForm);
                return this;
            } catch (ex) {
                $1.error("[$app.openPrintDialog] Error.", ex);
            }
        };

        $app.form.openConfirmationDialog = function (serviceName,data, serviceArgs, dialogOptions) {
            try {
                if (dialogForm.dialog('isOpen'))
                    throw 'Must close current dialogue before opening new one';
                var options = $.extend(dialogDefaultOptions, dialogOptions, {
                    'title': serviceArgs.title,
                    'buttons': {
                        'No': function () {
                            $app.form.closeDialog();
                        },
                        'Yes': function () {
                            try {
                                $app.form.closeDialog();
                                $app.content(serviceArgs.action, data);
                            } catch (ex) {
                                $1.error("[$app.form.openAutoDialog@save] Error.", ex);
                            }
                        }
                    }});
                dialogForm
                        .html('')
                        .dialog('option', options)
                        .dialog('open');
                $app.content(
                        serviceName,
                        serviceArgs,
                        $.noop, 
                        dialogForm);
                return this;
            } catch (ex) {
                $1.error("[$app.openAutoDialog] Error.", ex);
            }
        };

        /**
         * Download All Billing Report Dialog function
         */
        $app.form.openDownloadAllReportMesasge = function (serviceName, serviceArgs, activityTitle, dialogOptions, onSuccess) {
            try {
                if (dialogForm.dialog('isOpen'))
                    throw 'Must close current dialogue before opening new one';
                var options = $.extend(dialogDefaultOptions, dialogOptions, {
                    'title': activityTitle,
                    'buttons': {
                        'Close': function () {
                            $app.form.closeDialog();
                        },
                        'Download Report': function () {
                            try {
                                var $form = $('form:first', this);
                                if (!$form.length) {
                                    $1.warn("[$app.form.openPrintDialog@print] Can not find form in the dialog");
                                    return;
                                }
                                var serviceName = $form.attr('action');
                                if (serviceName == '#') {
                                    $1.warn("[$app.form.openPrintDialog@print] Invalid form action service:", serviceName);
                                    return;
                                }
                                
                                $('body').prepend("<div class='loader-container'><div class='loader'><h3>Processing..</h3><img src='skin/images/wheel.gif'></div></div>");
                                
                                var loading  = $('.loader-container'),
                                    url      = serviceName + '?' + $form.serialize(),                                
                                    checkUrl = url + "&check";
                                    
                                loading.show();
                                $.get(checkUrl, function(response){
                                    if($.trim(response) === "Exist"){
                                        loading.remove();
                                        top.location.href = url;
                                    } else {
                                        loading.hide();
                                        alert($.trim(response));
                                    }
                                });
                                
                                return false;
                                
                            } catch (ex) {
                                $1.error("[$app.form.openPrintDialog@print] Error.", ex);
                            }
                        }
                    }});
                dialogForm
                        .html('')
                        .dialog('option', options)
                        .dialog('open');
                $app.content(serviceName, serviceArgs, $.noop, dialogForm);
                return this;
            } catch (ex) {
                $1.error("[$app.openPrintDialog] Error.", ex);
            }
        };




        /**
         * Open a dialogue and load the content from an app service
         *
         * @param serviceName Service name for requesting the form
         * @param serviceArgs Arguments for the service
         * @param activityTitle Title to be used in dialogue
         * @param dialogOptions The dialog options
         */
        $app.form.openDialog = function (serviceName, data, complete, dialogOptions) {
            try {
                if (dialogForm.dialog('isOpen'))
                    throw 'Must close current dialogue before opening new one';

                dialogForm
                        .html('')
                        .dialog('option', dialogDefaultOptions)
                        .dialog('option', dialogOptions)
                        .dialog('open');
                $app.content(serviceName, data, complete, dialogForm);
                return this;
            } catch (ex) {
                $1.error("[$app.form.openDialog] Error.", ex);
            }
        };

        $app.form.showExtDialog = function (serviceName, data, complete, dialog) {
            try {
                if (dialog.length < 1) {
                    $('#btnCobrander').after('<div style="display: none;" class="containerDialog" title="Select Cobrander ID"></div>');
                    dialog = $('.containerDialog');
                    var over = $('.ui-widget-overlay');
                    if (over.length > 1) {
                        $('body').find('#overDialogExt').remove();
                    }
                    $('body').append('<div id="overDialogExt" class="ui-widget-overlay" style="z-index: 1001;"></div>');
                }
                $app.content(serviceName, data, complete, dialog);
            } catch (ex) {
                $1.error("[$app.form.openDialog] Error.", ex);
            }
        };

        $app.form.clearCobranderID = function () {
            try {
                if ($('#cobranderId').val().length > 0) {
                    $('#cobranderId').val('');
                }
            } catch (ex) {
                $1.error("[$app.clearText ]", ex);
            }
        };

        $app.form.hideDialog = function () {
            try {
                dialogForm.dialog('close');
            } catch (ex) {
                $1.error("[$app.form.closeDialog] Error.", ex);
            }
        };

        $app.form.showDialog = function () {
            try {
                dialogForm.dialog('open');
            } catch (ex) {
                $1.error("[$app.form.closeDialog] Error.", ex);
            }
        };

        $app.form.closeDialog = function () {
            try {
                if (!dialogForm.dialog('isOpen'))
                    throw 'Dialog was not opened';
                dialogForm
                        .html('')
                        .dialog('close');
                $('body').find('#overDialogExt').remove();
                return this;
            } catch (ex) {
                $1.error("[$app.form.closeDialog] Error.", ex);
            }
        };
        $app.form.clearErrorFlags = function (scope) {
            try {
                var context = $app.checkDOMContext(scope);
                $(':input,label', context).removeClass('form-flag-invalid');
                return this;
            } catch (ex) {
                $1.error("[$app.form.closeDialog] Error.", ex);
            }
        };
        /**
         * Flag input field as invalid
         * @param inputName The input field name
         * @param scope Search scope
         */
        $app.form.setErrorFlag = function (inputName, scope) {
            try {
                var context = $app.checkDOMContext(scope);
                var $input = $(':input[name="' + inputName + '"]', context);
                if (!$input.length) {
                    $1.warn('[$app.form.setErrorFlag] Can not w\input with name=', inputName)
                    return this;
                }
                $input.toggleClass('form-flag-invalid', true);
                var id = $.trim($input.attr('id'));
                if (id == '')
                    return this;
                var $label = $('label[id="' + id + '"]', context);
                if (!$label.length)
                    return this;
                return this;
            } catch (ex) {
                $1.error("[$app.form.setErrorFlag] Error.", ex);
            }
        };
        /**
         * Check reply from service
         * @param reply The raw reply data
         * @param scope Where to search the coresponding input fields. set FALSE to disable
         * @param alertTitle The title for alert, FALSE or NULL means no alert
         */
        $app.form.checkServiceReply = function (reply, scope, alertTitle) {
            try {
                if (typeof alertTitle != 'string')
                    alertTitle = '';

                var showAlert = (typeof alertTitle != 'null') || (showAlert !== false);
                if (showAlert && (typeof alertTitle != 'string'))
                    alertTitle = '';
                if (!reply)
                    $app.tell('Empty reply!', alertTitle);
                if ((typeof reply != 'object') ||
                        (typeof reply.success != 'boolean') ||
                        (typeof reply.summary != 'string') ||
                        (typeof reply.attachment != 'object'))
                    $app.tell('Invalid reply format', alertTitle);
                if (reply.success) {
                    if (showAlert)
                        $app.tell('Success!', alertTitle);
                    return true;
                } else if (!showAlert) {
                    return false;
                }

                var message;
                if (reply.summary == '') {
                    message = 'Error!';
                } else {
                    message = reply.summary;
                }
                if (scope !== false) {
                    if (!$.isEmptyObject(reply.attachment)) {
                        var errorFields = reply.attachment;
                        for (var field in errorFields) {
                            this.setErrorFlag(field, scope);
                            if (errorFields[field] != '') {
                                message += '\n' + errorFields[field];
                            }
                        }
                    }
                }
                $app.tell(message, alertTitle);
                return false;
            } catch (ex) {
                $1.error("[$app.form.checkServiceReply] Error.", ex);
                return false;
            }
        };
        /**
         * Execute a service 
         */
        $app.form.execService = function (serviceName, form, alertTitle, onSuccess) {
            try {
                var context = $app.checkDOMContext(form, false);
                if (context === false)
                    throw "Invalid context";
                var $context = $(context);
                this.clearErrorFlags($context);
                var showAlert = (typeof alertTitle != 'null') || (showAlert !== false);
                if (showAlert && (typeof alertTitle != 'string'))
                    alertTitle = '';
                var data = $context.serialize();
                $context
                        .hourglass()
                        .hourglass('show');
                $app.call(serviceName, data,
                        function (reply) {
                            try {
                                var success = $app.form.checkServiceReply(reply, $context, alertTitle)
                                if (success) {
                                    if (showAlert)
                                        $app.tell('Success!', alertTitle);
                                    if (typeof onSuccess == 'function') {
                                        var normalisedReply = $.extend({
                                            success: true,
                                            summary: '',
                                            attachment: true
                                        }, reply);
                                        onSuccess(normalisedReply);
                                    }
                                }
                            } catch (ex) {
                                $1.error("[$app.form.execService@ajaxsuccess] Error.", ex);
                            }
                        }, {
                    dataType: 'json',
                    complete: function () {
                        $context.hourglass('hide');
                    },
                    error: function () {
                        if (showAlert)
                            $app.tell('Service request error: ', alertTitle);//@debug
                        $1.error("[$app.form.execService@ajaxerror] Error.", ex, arguments);
                    }
                }
                );
                return this;
            } catch (ex) {
                $1.error("[$app.form.execService] Error.", ex);
            }
        };

    })($, $1, $app);
});